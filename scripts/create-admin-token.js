import { createClient } from '@supabase/supabase-js';
import { readFileSync, existsSync } from 'fs';
import { join, dirname } from 'path';
import { fileURLToPath } from 'url';
import { createHash, randomBytes } from 'crypto';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

let supabaseUrl = '';
let supabaseServiceKey = '';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–æ–≤
for (const env of ['.env', '.env.local']) {
    const envPath = join(__dirname, env);
    if (existsSync(envPath)) {
        const envContent = readFileSync(envPath, 'utf8');
        const envLines = envContent.split('\n');
        envLines.forEach(line => {
            const [key, value] = line.split('=');
            if (key && value) {
                if (key === 'NEXT_PUBLIC_SUPABASE_URL') {
                    supabaseUrl = value;
                }
                if (key === 'SERVICE_ROLE_SECRET') {
                    supabaseServiceKey = value;
                }
                process.env[key] = value;
            }
        });
    }
}

const supabase = createClient(
    supabaseUrl,
    supabaseServiceKey
);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞
function generateToken() {
    return randomBytes(32).toString('hex');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
function hashToken(token) {
    return createHash('sha256').update(token).digest('hex');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –∞–¥–º–∏–Ω–∞
async function createAdminToken(adminEmail, description = '', expiresInDays = null) {
    try {
        // –ù–∞—Ö–æ–¥–∏–º –∞–¥–º–∏–Ω–∞ –ø–æ email
        const { data: adminData, error: adminError } = await supabase
            .from('profiles')
            .select('id, role, display_name')
            .eq('id', (
                await supabase.auth.admin.listUsers()
            ).data.users.find(u => u.email === adminEmail)?.id);

        if (adminError) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∞:', adminError);
            return;
        }

        if (!adminData || adminData.length === 0) {
            console.error('–ê–¥–º–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω:', adminEmail);
            return;
        }

        const admin = adminData[0];

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º
        if (!['admin', 'super_admin'].includes(admin.role)) {
            console.error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º:', adminEmail);
            return;
        }

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
        const token = generateToken();
        const tokenHash = hashToken(token);

        // –í—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—É –∏—Å—Ç–µ—á–µ–Ω–∏—è
        let expiresAt = null;
        if (expiresInDays) {
            expiresAt = new Date();
            expiresAt.setDate(expiresAt.getDate() + expiresInDays);
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        const { data: tokenData, error: tokenError } = await supabase
            .from('admin_tokens')
            .insert({
                admin_id: admin.id,
                token_hash: tokenHash,
                description: description,
                expires_at: expiresAt
            })
            .select()
            .single();

        if (tokenError) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', tokenError);
            return;
        }

        console.log('‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!');
        console.log('üìß –ê–¥–º–∏–Ω:', adminEmail);
        console.log('üë§ –ò–º—è:', admin.display_name);
        console.log('üîë –¢–æ–∫–µ–Ω:', token);
        console.log('üìù –û–ø–∏—Å–∞–Ω–∏–µ:', description || '–ù–µ —É–∫–∞–∑–∞–Ω–æ');
        console.log('‚è∞ –ò—Å—Ç–µ–∫–∞–µ—Ç:', expiresAt ? expiresAt.toISOString() : '–ù–∏–∫–æ–≥–¥–∞');
        console.log('üÜî ID —Ç–æ–∫–µ–Ω–∞:', tokenData.id);
        console.log('');
        console.log('‚ö†Ô∏è  –í–ê–ñ–ù–û: –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Ç–æ–∫–µ–Ω —Å–µ–π—á–∞—Å! –û–Ω –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω.');

        return { token, tokenData };

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏
function showHelp() {
    console.log('üîë –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤');
    console.log('');
    console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:');
    console.log('  node create-admin-token.js <admin_email> [description] [expires_in_days]');
    console.log('');
    console.log('–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:');
    console.log('  admin_email     - Email –∞–¥–º–∏–Ω–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)');
    console.log('  description     - –û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)');
    console.log('  expires_in_days - –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –≤ –¥–Ω—è—Ö (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)');
    console.log('');
    console.log('–ü—Ä–∏–º–µ—Ä—ã:');
    console.log('  node create-admin-token.js admin@example.com');
    console.log('  node create-admin-token.js admin@example.com "API –¥–ª—è ML —Å–µ—Ä–≤–µ—Ä–∞"');
    console.log('  node create-admin-token.js admin@example.com "–í—Ä–µ–º–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø" 30');
    console.log('');
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
    const args = process.argv.slice(2);

    if (args.length === 0 || args[0] === '--help' || args[0] === '-h') {
        showHelp();
        return;
    }

    const adminEmail = args[0];
    const description = args[1] || '';
    const expiresInDays = args[2] ? parseInt(args[2]) : null;

    if (!adminEmail) {
        console.error('‚ùå –û—à–∏–±–∫–∞: –£–∫–∞–∂–∏—Ç–µ email –∞–¥–º–∏–Ω–∞');
        showHelp();
        return;
    }

    if (expiresInDays && (isNaN(expiresInDays) || expiresInDays <= 0)) {
        console.error('‚ùå –û—à–∏–±–∫–∞: –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º');
        return;
    }

    await createAdminToken(adminEmail, description, expiresInDays);
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
main().catch(console.error);
