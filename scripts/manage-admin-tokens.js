import { createClient } from '@supabase/supabase-js';
import { readFileSync, existsSync } from 'fs';
import { join, dirname } from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

let supabaseUrl = '';
let supabaseServiceKey = '';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–æ–≤
for (const env of ['.env', '.env.local']) {
    const envPath = join(__dirname, env);
    if (existsSync(envPath)) {
        const envContent = readFileSync(envPath, 'utf8');
        const envLines = envContent.split('\n');
        envLines.forEach(line => {
            const [key, value] = line.split('=');
            if (key && value) {
                if (key === 'NEXT_PUBLIC_SUPABASE_URL') {
                    supabaseUrl = value;
                }
                if (key === 'SERVICE_ROLE_SECRET') {
                    supabaseServiceKey = value;
                }
                process.env[key] = value;
            }
        });
    }
}

const supabase = createClient(
    supabaseUrl,
    supabaseServiceKey
);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–æ–∫–µ–Ω–æ–≤ –∞–¥–º–∏–Ω–∞
async function listAdminTokens(adminEmail) {
    try {
        // –ù–∞—Ö–æ–¥–∏–º –∞–¥–º–∏–Ω–∞ –ø–æ email
        const { data: users } = await supabase.auth.admin.listUsers();
        const adminUser = users.users.find(u => u.email === adminEmail);
        
        if (!adminUser) {
            console.error('‚ùå –ê–¥–º–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω:', adminEmail);
            return;
        }

        // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∞–¥–º–∏–Ω–∞
        const { data: adminData, error: adminError } = await supabase
            .from('profiles')
            .select('id, role, display_name')
            .eq('id', adminUser.id)
            .single();

        if (adminError) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –∞–¥–º–∏–Ω–∞:', adminError);
            return;
        }

        // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∞–¥–º–∏–Ω–∞
        const { data: tokens, error: tokensError } = await supabase
            .from('admin_tokens')
            .select('*')
            .eq('admin_id', adminData.id)
            .order('created_at', { ascending: false });

        if (tokensError) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤:', tokensError);
            return;
        }

        console.log(`üîë –¢–æ–∫–µ–Ω—ã –∞–¥–º–∏–Ω–∞: ${adminData.display_name} (${adminEmail})`);
        console.log('');

        if (tokens.length === 0) {
            console.log('üì≠ –¢–æ–∫–µ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
            return;
        }

        tokens.forEach((token, index) => {
            const status = token.revoked ? '‚ùå –û—Ç–æ–∑–≤–∞–Ω' : 
                          (token.expires_at && new Date(token.expires_at) < new Date()) ? '‚è∞ –ò—Å—Ç–µ–∫' : '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω';
            
            console.log(`${index + 1}. ID: ${token.id}`);
            console.log(`   –°—Ç–∞—Ç—É—Å: ${status}`);
            console.log(`   –û–ø–∏—Å–∞–Ω–∏–µ: ${token.description || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}`);
            console.log(`   –°–æ–∑–¥–∞–Ω: ${new Date(token.created_at).toLocaleString()}`);
            console.log(`   –ò—Å—Ç–µ–∫–∞–µ—Ç: ${token.expires_at ? new Date(token.expires_at).toLocaleString() : '–ù–∏–∫–æ–≥–¥–∞'}`);
            console.log('');
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∑—ã–≤–∞ —Ç–æ–∫–µ–Ω–∞
async function revokeToken(tokenId) {
    try {
        const { error } = await supabase
            .from('admin_tokens')
            .update({ revoked: true })
            .eq('id', tokenId);

        if (error) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–∑—ã–≤–∞ —Ç–æ–∫–µ–Ω–∞:', error);
            return;
        }

        console.log('‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –æ—Ç–æ–∑–≤–∞–Ω:', tokenId);

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–∑—ã–≤–∞ —Ç–æ–∫–µ–Ω–∞:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
async function deleteToken(tokenId) {
    try {
        const { error } = await supabase
            .from('admin_tokens')
            .delete()
            .eq('id', tokenId);

        if (error) {
            console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', error);
            return;
        }

        console.log('‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω:', tokenId);

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏
function showHelp() {
    console.log('üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞–º–∏ –∞–¥–º–∏–Ω–æ–≤');
    console.log('');
    console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:');
    console.log('  node manage-admin-tokens.js list <admin_email>');
    console.log('  node manage-admin-tokens.js revoke <token_id>');
    console.log('  node manage-admin-tokens.js delete <token_id>');
    console.log('');
    console.log('–ö–æ–º–∞–Ω–¥—ã:');
    console.log('  list <admin_email>  - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ç–æ–∫–µ–Ω—ã –∞–¥–º–∏–Ω–∞');
    console.log('  revoke <token_id>   - –û—Ç–æ–∑–≤–∞—Ç—å —Ç–æ–∫–µ–Ω (–ø–æ–º–µ—Ç–∏—Ç—å –∫–∞–∫ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π)');
    console.log('  delete <token_id>   - –£–¥–∞–ª–∏—Ç—å —Ç–æ–∫–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
    console.log('');
    console.log('–ü—Ä–∏–º–µ—Ä—ã:');
    console.log('  node manage-admin-tokens.js list admin@example.com');
    console.log('  node manage-admin-tokens.js revoke 123e4567-e89b-12d3-a456-426614174000');
    console.log('  node manage-admin-tokens.js delete 123e4567-e89b-12d3-a456-426614174000');
    console.log('');
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
    const args = process.argv.slice(2);

    if (args.length === 0 || args[0] === '--help' || args[0] === '-h') {
        showHelp();
        return;
    }

    const command = args[0];

    switch (command) {
        case 'list':
            if (args.length < 2) {
                console.error('‚ùå –û—à–∏–±–∫–∞: –£–∫–∞–∂–∏—Ç–µ email –∞–¥–º–∏–Ω–∞');
                showHelp();
                return;
            }
            await listAdminTokens(args[1]);
            break;

        case 'revoke':
            if (args.length < 2) {
                console.error('‚ùå –û—à–∏–±–∫–∞: –£–∫–∞–∂–∏—Ç–µ ID —Ç–æ–∫–µ–Ω–∞');
                showHelp();
                return;
            }
            await revokeToken(args[1]);
            break;

        case 'delete':
            if (args.length < 2) {
                console.error('‚ùå –û—à–∏–±–∫–∞: –£–∫–∞–∂–∏—Ç–µ ID —Ç–æ–∫–µ–Ω–∞');
                showHelp();
                return;
            }
            await deleteToken(args[1]);
            break;

        default:
            console.error('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞:', command);
            showHelp();
    }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
main().catch(console.error);
