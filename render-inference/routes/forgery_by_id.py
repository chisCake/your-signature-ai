"""
–†–æ—É—Ç–µ—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–¥–¥–µ–ª–∫–∏ –ø–æ ID –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –∏ –ø–æ–¥–¥–µ–ª—å–Ω–æ–π –ø–æ–¥–ø–∏—Å–∏
"""

from fastapi import APIRouter, Depends, HTTPException
from pydantic import BaseModel
from typing import Optional
import logging
import torch
import torch.nn.functional as F
import numpy as np # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å np.array, –ø–æ–ª—É—á–µ–Ω–Ω—ã–º –∏–∑ –ø—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥–∞

# –ò–º–ø–æ—Ä—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
# –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ main.py –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
try:
    from main import get_supabase_client, get_model_loader
    from utils.supabase_client import SupabaseClient
    from utils.model_loader import ModelLoader
    from utils.preprocessing import v1_preprocess_signature_data
except ImportError as e:
    # –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –∏–ª–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.error(f"Failed to import dependencies from main: {e}")
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–≥–ª—É—à–∫–∏ –∏–ª–∏ —è–≤–Ω—ã–π —Å–±–æ–π, –µ—Å–ª–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∫—Ä–∏—Ç–∏—á–Ω—ã
    SupabaseClient = type('SupabaseClient', (object,), {'get_signature_data': lambda self, id: None})
    ModelLoader = type('ModelLoader', (object,), {
        'encode_signature': lambda self, tensor: torch.rand(1, 128) # –ó–∞–≥–ª—É—à–∫–∞
    })
    v1_preprocess_signature_data = lambda data: np.zeros((100, 3)) # –ó–∞–≥–ª—É—à–∫–∞


logger = logging.getLogger(__name__)

router = APIRouter(prefix="/forgery-by-id", tags=["forgery-analysis"])

class ForgeryByIdRequest(BaseModel):
    """–°—Ö–µ–º–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–¥–¥–µ–ª–∫–∏ –ø–æ ID. 
    FastAPI –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —ç—Ç—É –º–æ–¥–µ–ª—å –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ JSON —Ç–µ–ª–∞."""
    original_id: str
    forgery_id: str

class ForgeryAnalysisResponse(BaseModel):
    """–û—Ç–≤–µ—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–¥–¥–µ–ª–∫–∏"""
    is_forgery: bool
    similarity_score: float
    threshold: float
    original_id: str
    forgery_id: Optional[str] = None
    error: Optional[str] = None

@router.post("/", response_model=ForgeryAnalysisResponse)
async def analyze_forgery_by_id(
    request_body: ForgeryByIdRequest, # üëà FastAPI –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
    supabase_client: SupabaseClient = Depends(get_supabase_client),
    model_loader: ModelLoader = Depends(get_model_loader)
):
    """
    –ê–Ω–∞–ª–∏–∑ –ø–æ–¥–¥–µ–ª–∫–∏ –ø–æ ID –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –∏ –ø–æ–¥–¥–µ–ª—å–Ω–æ–π –ø–æ–¥–ø–∏—Å–∏.
    
    Args:
        request_body: –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ (original_id, forgery_id)
        supabase_client: –ö–ª–∏–µ–Ω—Ç Supabase, –≤–Ω–µ–¥—Ä–µ–Ω–Ω—ã–π —á–µ—Ä–µ–∑ Depends
        model_loader: –ó–∞–≥—Ä—É–∑—á–∏–∫ –º–æ–¥–µ–ª–∏, –≤–Ω–µ–¥—Ä–µ–Ω–Ω—ã–π —á–µ—Ä–µ–∑ Depends
    
    Returns:
        –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–¥–¥–µ–ª–∫–∏
    """
    # –¢–µ–ø–µ—Ä—å –º—ã –ø–æ–ª—É—á–∞–µ–º ID –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
    original_id = request_body.original_id
    forgery_id = request_body.forgery_id
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
    current_original_id = original_id
    current_forgery_id = forgery_id

    try:
        logger.info("=== FORGERY BY ID REQUEST START ===")
        logger.info(f"Analyzing forgery by ID: original={original_id}, forgery={forgery_id}")

        # --- –®–∞–≥ 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Supabase ---
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –ø–æ–¥–ø–∏—Å–∏
        original_data = supabase_client.get_signature_data(original_id)
        if not original_data:
            raise HTTPException(status_code=404, detail=f"Original signature {original_id} not found")

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–¥–µ–ª—å–Ω–æ–π –ø–æ–¥–ø–∏—Å–∏
        forgery_data = supabase_client.get_signature_data(forgery_id)
        if not forgery_data:
            raise HTTPException(status_code=404, detail=f"Forgery signature {forgery_id} not found")

        # --- –®–∞–≥ 2: –ü—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ–Ω–∑–æ—Ä–æ–≤ ---
        
        original_features = v1_preprocess_signature_data(original_data)
        forgery_features = v1_preprocess_signature_data(forgery_data)
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ç–µ–Ω–∑–æ—Ä—ã PyTorch –∏ –¥–æ–±–∞–≤–ª—è–µ–º batch dimension
        original_tensor = torch.from_numpy(original_features).float().unsqueeze(0)
        forgery_tensor = torch.from_numpy(forgery_features).float().unsqueeze(0)

        # --- –®–∞–≥ 3: –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –∏ –∞–Ω–∞–ª–∏–∑ ---

        # –ü–æ–ª—É—á–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥–∏
        original_embedding = model_loader.encode_signature(original_tensor)
        forgery_embedding = model_loader.encode_signature(forgery_tensor)

        # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ—Å–∏–Ω—É—Å–Ω–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ
        similarity_score = float(F.cosine_similarity(original_embedding, forgery_embedding, dim=1))

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä–æ–≥ –¥–ª—è –ø–æ–¥–¥–µ–ª–∫–∏
        threshold = 0.7 

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –ø–æ–¥–¥–µ–ª–∫–æ–π
        is_forgery = similarity_score < threshold

        logger.info(f"Analysis completed: similarity={similarity_score:.4f}, is_forgery={is_forgery}")

        result = ForgeryAnalysisResponse(
            is_forgery=is_forgery,
            similarity_score=similarity_score,
            threshold=threshold,
            original_id=original_id,
            forgery_id=forgery_id
        )

        logger.info(f"=== FORGERY BY ID REQUEST SUCCESS ===")
        return result

    except HTTPException as e:
        logger.error(f"=== FORGERY BY ID HTTP ERROR ===")
        logger.error(f"HTTP Exception: {e.status_code} - {e.detail}")
        raise
    except Exception as e:
        logger.error(f"=== FORGERY BY ID GENERAL ERROR ===")
        logger.error(f"Error analyzing forgery by ID: {str(e)}")
        import traceback
        logger.error(f"Traceback: {traceback.format_exc()}")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –æ–± –æ—à–∏–±–∫–µ
        return ForgeryAnalysisResponse(
            is_forgery=False,
            similarity_score=0.0,
            threshold=0.7,
            original_id=current_original_id,
            forgery_id=current_forgery_id,
            error=f"Analysis failed: {str(e)}"
        )
